[gd_scene load_steps=15 format=3 uid="uid://drlekbtdwxhhv"]

[ext_resource type="PackedScene" uid="uid://l1nxgrfgq8nb" path="res://main/world/room/room.tscn" id="1_m8l7j"]
[ext_resource type="Texture2D" uid="uid://dmto86uky6mhu" path="res://main/world/room/yard/yard.png" id="2_khvov"]
[ext_resource type="AudioStream" uid="uid://d2fvo2xy55ul4" path="res://main/music/watermelon_factory.ogg" id="2_kk1ix"]
[ext_resource type="Shader" path="res://main/world/room/yard/nebula.gdshader" id="2_xxx2m"]
[ext_resource type="Texture2D" uid="uid://cuok0hclhesn0" path="res://main/world/room/yard/palette_stars.png" id="3_lkidn"]
[ext_resource type="Texture2D" uid="uid://be0se47pgvbrp" path="res://main/world/room/yard/background.png" id="4_jvdcc"]
[ext_resource type="Texture2D" uid="uid://duig11rt8jtcp" path="res://main/theme/palette_dark.png" id="5_2h3c2"]

[sub_resource type="Shader" id="Shader_d0i7j"]
code = "shader_type canvas_item;

uniform sampler2D palette: source_color, filter_nearest; // Insert a palette from lospec for instance
uniform int palette_size = 13;

uniform bool stars_on = true;

uniform float timeScaleFactor = .04;

// Make sure to use a seamless noise texture
uniform sampler2D noise_texture: repeat_enable, filter_linear;

uniform vec4 colour_muiltiplier: source_color = vec4(1.0,1.0,1.0,1.0);
uniform vec4 colour_muiltiplier2: source_color = vec4(1.0,1.0,1.0,1.0);

uniform float brightness: hint_range(0.0, 3.0, 0.01) = 1.0;
uniform float clouds_resolution: hint_range(0.0, 10.0, 0.01) = 3.0;
uniform float clouds_intesity: hint_range(-0.06, 0.0, 0.001) = 0.0;
uniform float waveyness: hint_range(0.0, 10.0, 0.01) = 0.5;
uniform float fragmentation: hint_range(0.0, 100.0, 0.01) = 7.0;
uniform float distortion: hint_range(0.0, 10.0, 0.01) = 0.5;
uniform float clouds_alpha: hint_range(0.4, 0.6, 0.01) = 0.5;
uniform float movement: hint_range(0.7, 1.3, 0.01) = 1.0;
uniform float blur: hint_range(0.0, 10.0, 0.01) = 1.4;
uniform float blur2: hint_range(0.0, 0.01, 0.00001) = 0.01;

//uniform vec2 direction = vec2(1.0);

//uniform float red =  0.001;
//uniform float blue = 0.001;
//uniform float green = 0.001;

float localTime() {
	return TIME * timeScaleFactor;
}

mat2 makem2(float theta) {
	float c = cos(theta);
	float s = sin(theta);
	return mat2(vec2(c, -s), vec2(s, c));
}

float noise(vec2 x) {
	return texture(noise_texture, x * blur2).x;
}
float noisey(vec2 y) {
	return texture(noise_texture, y * blur2).y;
}

vec2 gradn(vec2 p) {
	float ep = .09;
	float gradx = noise(vec2(p.x + ep, p.y)) - noise(vec2(p.x - ep, p.y));
	float grady = noisey(vec2(p.x, p.y + ep)) - noisey(vec2(p.x, p.y - ep));
	return vec2(gradx, grady);
}

float flow(vec2 p) {
	float z = 2.;
	float rz = clouds_intesity;
	vec2 bp = p;
	
	for(float i = 1.; i < 7.; ++i) {
		p += localTime() * .6;
		bp += localTime() * 5.9;
		vec2 gr = gradn(i * p * .34 + localTime() * 1.);
		gr *= makem2(localTime() * 6. - (.05 * p.x + .03 * p.y) * 90.);
		p += gr * waveyness;
		rz += (sin(noise(p) * fragmentation) * distortion + clouds_alpha) / z;
		p = mix(bp, p, movement);
		z *= blur;
		p *= 2.;
		bp *= 1.9;
	}
	return rz;
}

float rand(vec2 st) {
	
    return fract(sin(dot(st.xy, vec2(12.9898,72.233))) * 53758.5453123);
}



void fragment() {
	vec2 resolution = 1.0 / TEXTURE_PIXEL_SIZE;
	vec2 fragCoord = UV*1024.0;
	fragCoord = vec2(fragCoord.x, fragCoord.y - resolution.y );//resolution.y 
	
	vec2 p = fragCoord / resolution - 0.5;
	
	p.x *= resolution.x / resolution.y;
	
	p *= clouds_resolution;
	
	//float red = flow(p * (0.1 / sin(TIME * timeScaleFactor)));
	//float blue = flow(p * (0.1 / cos(TIME * timeScaleFactor)));
	//float green = flow(p * (0.1 / sin(TIME * timeScaleFactor)));
	//float new_red = (red * sin(TIME));
	//float new_blue = (blue * cos(TIME));
	//float new_green = (green * sin(TIME));
	float red = 0.2 * (sin(TIME * 0.1));
	float blue = 0.1 ;
	float green = 0.1 ;
	
	
	float rz = flow(p);
	vec3 col = vec3(red, blue, green) / rz;
	col = pow(col, vec3(brightness));
	
	float stars = 0.0;
	
	if (rand(UV.xy / 20.0) > 0.995) //0.996
	{
		float r = rand(UV.xy);
		stars = r * (0.5 * sin(TIME * (r * 2.0) + 1000.0 * r) + 0.5);
	}
	
	if (stars_on) {
		COLOR = vec4((col + stars) * colour_muiltiplier.rgb, 1.0) * colour_muiltiplier2;
	}
	else {
		COLOR = vec4((col) * colour_muiltiplier.rgb, 1.0) * colour_muiltiplier2;
	}
	float index = max(1.0, round(COLOR.r * 255.0 / 19.0));
	float p_width = 1.0 / float(palette_size);
	COLOR = texture(palette, vec2(p_width * index + p_width / 2.0, 0.5));
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_pe161"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_uwo5g"]
seamless = true
noise = SubResource("FastNoiseLite_pe161")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_p2e7e"]
shader = SubResource("Shader_d0i7j")
shader_parameter/palette_size = 10
shader_parameter/stars_on = true
shader_parameter/timeScaleFactor = 0.01
shader_parameter/colour_muiltiplier = Color(1, 1, 1, 1)
shader_parameter/colour_muiltiplier2 = Color(1, 1, 1, 1)
shader_parameter/brightness = 1.0
shader_parameter/clouds_resolution = 5.24
shader_parameter/clouds_intesity = 0.0
shader_parameter/waveyness = 0.5
shader_parameter/fragmentation = 7.0
shader_parameter/distortion = 0.5
shader_parameter/clouds_alpha = 0.5
shader_parameter/movement = 1.0
shader_parameter/blur = 1.4
shader_parameter/blur2 = 0.01
shader_parameter/palette = ExtResource("3_lkidn")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_uwo5g")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_3c806"]
frequency = 0.0198

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_geqhe"]
seamless = true
noise = SubResource("FastNoiseLite_3c806")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6rd7a"]
shader = ExtResource("2_xxx2m")
shader_parameter/palette_size = 9
shader_parameter/stars_on = true
shader_parameter/timeScaleFactor = 0.01
shader_parameter/colour_muiltiplier = Color(0.409603, 0.409603, 0.409603, 1)
shader_parameter/colour_muiltiplier2 = Color(1, 1, 1, 1)
shader_parameter/brightness = 1.0
shader_parameter/clouds_resolution = 5.94
shader_parameter/clouds_intesity = 0.0
shader_parameter/waveyness = 0.5
shader_parameter/fragmentation = 7.0
shader_parameter/distortion = 0.5
shader_parameter/clouds_alpha = 0.5
shader_parameter/movement = 1.0
shader_parameter/blur = 1.4
shader_parameter/blur2 = 0.01
shader_parameter/palette = ExtResource("5_2h3c2")
shader_parameter/noise_texture = SubResource("NoiseTexture2D_geqhe")

[node name="Yard" instance=ExtResource("1_m8l7j")]

[node name="MusicPlayer" parent="." index="0"]
stream = ExtResource("2_kk1ix")

[node name="Parallax2D" type="Parallax2D" parent="." index="1"]
z_index = -1
scroll_scale = Vector2(0.5, 0.5)

[node name="Background" type="Sprite2D" parent="Parallax2D" index="0"]
z_index = -1
material = SubResource("ShaderMaterial_p2e7e")
texture = ExtResource("4_jvdcc")
centered = false

[node name="Sprite2D" type="Sprite2D" parent="." index="2"]
z_index = -1
material = SubResource("ShaderMaterial_6rd7a")
texture = ExtResource("2_khvov")
centered = false

[node name="Default" parent="Anchors" index="0"]
position = Vector2(270, 495)

[node name="BottomRight" parent="." index="11"]
position = Vector2(513, 513)
